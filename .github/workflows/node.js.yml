name: Deploy to AWS Elastic Beanstalk

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - run: npm ci

      - name: Create .env file
        run: |
          touch .env
          echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> .env
          echo "EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}" >> .env
          echo "MONGO_DB=${{ secrets.MONGO_DB }}" >> .env
          echo "MONGO_DB_PASSWORD=${{ secrets.MONGO_DB_PASSWORD }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "MONGO_DB_USERNAME=${{ secrets.MONGO_DB_USERNAME }}" >> .env
          echo "TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }}" >> .env
          echo "TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }}" >> .env

      - name: Install PM2 globally
        run: npm install -g pm2

      - name: Zip the application
        run: zip -r password-app-api.zip ./*

      - name: Deploy to AWS Elastic Beanstalk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"  # Change if your Elastic Beanstalk is in a different region
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

        run: |
          VERSION_LABEL=v1.0-${{ github.sha }}-$(date +%s)
          
          # Upload the zipped application to S3
          aws s3 cp password-app-api.zip s3://${{ env.S3_BUCKET_NAME }}/password-app-api.zip
          
          # Check if the environment exists
          if ! aws elasticbeanstalk describe-environments --application-name "password-api" --environment-names "Password-api-env" > /dev/null 2>&1; then
            echo "Environment does not exist. Creating a new environment..."
            
            # Create a new environment if it doesn't exist
            aws elasticbeanstalk create-environment \
              --application-name "password-api" \
              --environment-name "Password-api-env" \
              --solution-stack-name "64bit Amazon Linux 2 v3.3.8 running Node.js 14" \
              --version-label $VERSION_LABEL
              
            # Wait for the environment to become ready
            echo "Waiting for the environment to become ready..."
            aws elasticbeanstalk wait environment-exists \
              --application-name "password-api" \
              --environment-names "Password-api-env"

            aws elasticbeanstalk wait environment-health-ok \
              --environment-name "Password-api-env"
          else
            echo "Environment exists. Updating the environment..."
            
            # Create a new application version in Elastic Beanstalk
            aws elasticbeanstalk create-application-version \
              --application-name "password-api" \
              --version-label $VERSION_LABEL \
              --source-bundle S3Bucket=${{ env.S3_BUCKET_NAME }},S3Key=password-app-api.zip
            
            # Update the existing environment with the new version
            aws elasticbeanstalk update-environment \
              --environment-name "Password-api-env" \
              --version-label $VERSION_LABEL
          fi

  docker-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Docker Image
        run: docker build -t developerhacker/password-app-api_backend .

      - name: Push Docker Image
        run: docker push developerhacker/password-app-api_backend
